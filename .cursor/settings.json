{
    // ===== FLEXT STANDARD CURSOR CONFIGURATION =====
    // Python 3.13 + Modern Tooling + AI Integration
    // Optimized for Cursor's AI-enhanced development experience
    // ===== CURSOR AI CONFIGURATION =====
    "cursor.ai.enabled": true,
    "cursor.ai.model": "claude-4-sonnet",
    "cursor.ai.useContextFromWorkspace": true,
    "cursor.ai.includeFileExtensions": [
        ".py",
        ".toml",
        ".yaml",
        ".yml",
        ".md",
        ".json"
    ],
    "cursor.ai.excludePatterns": [
        "**/__pycache__/**",
        "**/.pytest_cache/**",
        "**/.mypy_cache/**",
        "**/.ruff_cache/**",
        "**/htmlcov/**",
        "**/build/**",
        "**/dist/**",
        "**/*.egg-info/**",
        "**/.venv/**",
        "**/poetry.lock",
        "**/node_modules/**"
    ],
    "cursor.ai.codeGeneration.enabled": true,
    "cursor.ai.codeGeneration.respectPyprojectToml": true,
    "cursor.ai.codeGeneration.followFlextStandards": true,
    "cursor.ai.completions.enabled": true,
    "cursor.ai.completions.triggerOnType": true,
    "cursor.ai.refactoring.enabled": true,
    "cursor.ai.documentation.autoGenerate": true,
    "cursor.ai.testing.autoSuggest": true,
    // ===== PYTHON CONFIGURATION =====
    "python.defaultInterpreterPath": ".venv/bin/python",
    "python.pythonPath": ".venv/bin/python",
    "python.terminal.activateEnvironment": true,
    "python.terminal.activateEnvInCurrentTerminal": true,
    "python.envFile": "${workspaceFolder}/.env",
    "python.languageServer": "Pylance",
    // ===== LINTING & FORMATTING =====
    // Ruff - Primary linter (AI-aware configuration)
    "ruff.enable": true,
    "ruff.lint.enable": true,
    "ruff.format.enable": true,
    "ruff.lint.args": [
        "--select=ALL",
        "--preview",
        "--show-fixes",
        "--respect-gitignore"
    ],
    "ruff.format.args": [
        "--line-length=88",
        "--target-version=py313"
    ],
    "ruff.showNotifications": "onError",
    // Black - Code formatter
    "black-formatter.enable": true,
    "black-formatter.args": [
        "--line-length=88",
        "--target-version=py313",
        "--fast"
    ],
    // isort - Import sorting
    "isort.enable": true,
    "isort.args": [
        "--profile=black",
        "--line-length=88",
        "--force-sort-within-sections",
        "--skip-gitignore"
    ],
    // MyPy - Type checking
    "mypy-type-checker.enable": true,
    "mypy-type-checker.args": [
        "--strict",
        "--show-error-codes",
        "--pretty",
        "--python-version=3.13",
        "--config-file=pyproject.toml"
    ],
    "mypy-type-checker.severity": {
        "error": "Error",
        "note": "Information"
    },
    // ===== TESTING & DEBUGGING =====
    "python.testing.pytestEnabled": true,
    "python.testing.unittestEnabled": false,
    "python.testing.pytestArgs": [
        "tests",
        "-v",
        "--tb=short",
        "--strict-markers",
        "--strict-config",
        "--color=yes"
    ],
    "python.testing.autoTestDiscoverOnSaveEnabled": true,
    "python.debugging.flask.debugPy": true,
    "python.debugging.enableCodeCoverage": true,
    // ===== CURSOR-SPECIFIC EDITOR SETTINGS =====
    "editor.formatOnSave": true,
    "editor.formatOnPaste": true,
    "editor.formatOnType": false, // Disabled for better AI experience
    "editor.codeActionsOnSave": {
        "source.organizeImports": "explicit",
        "source.fixAll": "explicit",
        "source.fixAll.ruff": "explicit"
    },
    "editor.defaultFormatter": "ms-python.black-formatter",
    "editor.rulers": [
        88
    ],
    "editor.tabSize": 4,
    "editor.insertSpaces": true,
    "editor.detectIndentation": false,
    "editor.trimAutoWhitespace": true,
    "editor.wordWrap": "off",
    "editor.suggestSelection": "first",
    "editor.quickSuggestions": {
        "other": true,
        "comments": true,
        "strings": true
    },
    "editor.inlineSuggest.enabled": true,
    "editor.inlineSuggest.showToolbar": "onHover",
    // ===== AI-ENHANCED INTELLISENSE =====
    "python.analysis.autoImportCompletions": true,
    "python.analysis.completeFunctionParens": true,
    "python.analysis.typeCheckingMode": "strict",
    "python.analysis.autoSearchPaths": true,
    "python.analysis.diagnosticMode": "workspace",
    "python.analysis.stubPath": "stubs",
    "python.analysis.logLevel": "Warning",
    "python.analysis.extraPaths": [
        "src"
    ],
    "python.analysis.include": [
        "src"
    ],
    "python.analysis.exclude": [
        "**/__pycache__",
        "**/.pytest_cache",
        "**/.mypy_cache",
        "**/.ruff_cache",
        "**/build",
        "**/dist"
    ],
    // ===== LANGUAGE SPECIFIC (AI-OPTIMIZED) =====
    "[python]": {
        "editor.defaultFormatter": "ms-python.black-formatter",
        "editor.codeActionsOnSave": {
            "source.organizeImports": "explicit",
            "source.fixAll": "explicit",
            "source.fixAll.ruff": "explicit"
        },
        "editor.formatOnSave": true,
        "editor.tabSize": 4,
        "editor.insertSpaces": true,
        "editor.semanticHighlighting.enabled": true,
        "editor.inlineSuggest.enabled": true
    },
    "[json]": {
        "editor.defaultFormatter": "vscode.json-language-features",
        "editor.tabSize": 2
    },
    "[jsonc]": {
        "editor.defaultFormatter": "vscode.json-language-features",
        "editor.tabSize": 2
    },
    "[yaml]": {
        "editor.defaultFormatter": "redhat.vscode-yaml",
        "editor.tabSize": 2,
        "editor.insertSpaces": true
    },
    "[toml]": {
        "editor.defaultFormatter": "tamasfe.even-better-toml",
        "editor.tabSize": 2
    },
    "[markdown]": {
        "editor.defaultFormatter": "DavidAnson.vscode-markdownlint",
        "editor.wordWrap": "on",
        "editor.quickSuggestions": {
            "comments": "off",
            "strings": "off",
            "other": "off"
        }
    },
    // ===== FILE ASSOCIATIONS =====
    "files.associations": {
        "*.toml": "toml",
        "pyproject.toml": "toml",
        "*.yaml": "yaml",
        "*.yml": "yaml",
        ".pre-commit-config.yaml": "yaml",
        "Dockerfile*": "dockerfile",
        ".env*": "properties",
        "Makefile": "makefile",
        "*.mk": "makefile"
    },
    // ===== EXCLUSIONS (AI-OPTIMIZED) =====
    "files.exclude": {
        "**/__pycache__": true,
        "**/*.pyc": true,
        "**/*.pyo": true,
        "**/.pytest_cache": true,
        "**/.mypy_cache": true,
        "**/.ruff_cache": true,
        "**/.coverage": true,
        "**/htmlcov": true,
        "**/build": true,
        "**/dist": true,
        "**/*.egg-info": true,
        "**/.venv": false, // Show venv for AI context
        "**/node_modules": true,
        "**/.git": false // Show git for AI context
    },
    "search.exclude": {
        "**/__pycache__": true,
        "**/*.pyc": true,
        "**/.pytest_cache": true,
        "**/.mypy_cache": true,
        "**/.ruff_cache": true,
        "**/htmlcov": true,
        "**/build": true,
        "**/dist": true,
        "**/*.egg-info": true,
        "**/poetry.lock": true,
        "**/.venv": true,
        "**/node_modules": true
    },
    // ===== GIT & VERSION CONTROL =====
    "git.enableSmartCommit": true,
    "git.confirmSync": false,
    "git.autofetch": true,
    "git.ignoreRebaseWarning": true,
    "git.openRepositoryInParentFolders": "never",
    // ===== TERMINAL =====
    "terminal.integrated.defaultProfile.linux": "bash",
    "terminal.integrated.defaultProfile.osx": "zsh",
    "terminal.integrated.defaultProfile.windows": "PowerShell",
    "terminal.integrated.cwd": "${workspaceFolder}",
    "terminal.integrated.env.linux": {
        "FLEXT_DEV": "true",
        "PYTHONPATH": "src"
    },
    "terminal.integrated.env.osx": {
        "FLEXT_DEV": "true",
        "PYTHONPATH": "src"
    },
    // ===== PERFORMANCE OPTIMIZATIONS =====
    "files.insertFinalNewline": true,
    "files.trimTrailingWhitespace": true,
    "files.trimFinalNewlines": true,
    "files.hotExit": "onExitAndWindowClose",
    "workbench.settings.enableNaturalLanguageSearch": false,
    "search.followSymlinks": false,
    // ===== CURSOR AI WORKSPACE CONTEXT =====
    "cursor.ai.workspaceContext": {
        "includePatterns": [
            "src/**/*.py",
            "tests/**/*.py",
            "pyproject.toml",
            "README.md",
            "Makefile",
            ".pre-commit-config.yaml",
            "docs/**/*.md"
        ],
        "excludePatterns": [
            "**/__pycache__/**",
            "**/.pytest_cache/**",
            "**/.mypy_cache/**",
            "**/.ruff_cache/**",
            "**/htmlcov/**",
            "**/build/**",
            "**/dist/**",
            "**/*.egg-info/**",
            "**/poetry.lock"
        ],
        "maxFileSize": "1MB",
        "respectGitignore": true
    },
    // ===== FLEXT SPECIFIC AI PROMPTS =====
    "cursor.ai.customPrompts": {
        "flext-standards": "Always follow FLEXT standards: Python 3.13, strict typing, comprehensive testing, zero warnings policy, and PEP compliance.",
        "quality-first": "Prioritize code quality, security, and maintainability. All code must pass quality gates.",
        "enterprise-ready": "Write enterprise-grade code with proper error handling, logging, and documentation."
    },
    // ===== SECURITY =====
    "security.workspace.trust.untrustedFiles": "prompt",
    "extensions.ignoreRecommendations": false,
    // ===== ADDITIONAL TOOLS INTEGRATION =====
    "better-comments.multilineComments": true,
    "better-comments.highlightPlainText": false,
    "todo-tree.general.tags": [
        "BUG",
        "HACK",
        "FIXME",
        "TODO",
        "XXX",
        "NOTE",
        "WARNING",
        "FLEXT"
    ],
    "gitlens.enabled": true,
    "gitlens.codeLens.enabled": true,
    "gitlens.currentLine.enabled": true,
    // ===== CURSOR SPECIFIC FEATURES =====
    "cursor.chat.enabled": true,
    "cursor.chat.model": "claude-3.5-sonnet",
    "cursor.chat.contextWindow": 200000,
    "cursor.composer.enabled": true,
    "cursor.composer.model": "claude-3.5-sonnet"
}
