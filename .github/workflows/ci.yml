# ===== FLEXT STANDARD CI/CD PIPELINE =====
# Modern GitHub Actions workflow for Python 3.13
# Zero tolerance quality gates with comprehensive testing
# Supports bleeding-edge tools and enterprise standards

name: "🚀 FLEXT CI/CD Pipeline"

on:
  push:
    branches: [main, develop, "feature/*", "hotfix/*", "release/*"]
    tags: ["v*"]
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: "Deployment Environment"
        required: false
        default: "staging"
        type: choice
        options:
          - staging
          - production
      run_performance_tests:
        description: "Run Performance Tests"
        required: false
        default: false
        type: boolean

# ===== GLOBAL CONFIGURATION =====
env:
  PYTHON_VERSION: "3.13"
  POETRY_VERSION: "1.8.0"
  FLEXT_DEV: true
  FLEXT_STRICT_MODE: true
  PYTHONPATH: src
  # Security
  FORCE_COLOR: 1
  PRE_COMMIT_COLOR: always
  # Performance
  PIP_CACHE_DIR: ~/.cache/pip
  POETRY_CACHE_DIR: ~/.cache/pypoetry
  PRE_COMMIT_HOME: ~/.cache/pre-commit

# ===== CONCURRENCY CONTROL =====
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# ===== PERMISSIONS =====
permissions:
  contents: read
  checks: write
  pull-requests: write
  security-events: write
  actions: read

jobs:
  # ===== QUALITY GATES =====
  quality-gate:
    name: "🛡️ Quality Gate"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event.pull_request.draft == false

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.13"]

    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for better analysis

      - name: "🐍 Set up Python ${{ matrix.python-version }}"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: "📦 Install Poetry"
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: "💾 Cache Dependencies"
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.cache/pypoetry
            ~/.cache/pre-commit
            .venv
          key: ${{ runner.os }}-python-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-python-${{ matrix.python-version }}-poetry-
            ${{ runner.os }}-python-${{ matrix.python-version }}-

      - name: "📦 Install Dependencies"
        run: |
          poetry install --no-interaction --no-ansi --extras dev
          poetry run pip install --upgrade pip

      - name: "🔍 Poetry Check"
        run: poetry check --lock

      - name: "🎨 Code Formatting Check"
        run: |
          poetry run black --check --diff .
          poetry run ruff format --check .
          poetry run isort --check-only --diff .

      - name: "🔬 Comprehensive Linting"
        run: |
          poetry run ruff check . --output-format=github --no-fix
          poetry run pylint src --output-format=colorized --fail-under=10.0

      - name: "🎯 Type Checking"
        run: |
          poetry run mypy src --strict --show-error-codes --pretty

      - name: "🔒 Security Analysis"
        run: |
          mkdir -p reports
          poetry run bandit -r src/ -f json -o reports/bandit.json
          poetry run safety check --json
          poetry run pip-audit --format=json --output=reports/pip-audit.json

      - name: "📊 Upload Security Reports"
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports-${{ matrix.python-version }}
          path: reports/
          retention-days: 30

  # ===== COMPREHENSIVE TESTING =====
  test:
    name: "🧪 Test Suite"
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    if: github.event.pull_request.draft == false

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.13"]

    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@v4

      - name: "🐍 Set up Python ${{ matrix.python-version }}"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: "📦 Install Poetry"
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: "💾 Cache Dependencies"
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.cache/pypoetry
            .venv
          key: ${{ runner.os }}-python-${{ matrix.python-version }}-poetry-${{ hashFiles('**/poetry.lock') }}

      - name: "📦 Install Dependencies"
        run: poetry install --no-interaction --extras dev

      - name: "🧪 Run Tests"
        run: |
          poetry run pytest tests/ \
            --verbose \
            --tb=short \
            --strict-markers \
            --strict-config \
            --cov=src \
            --cov-branch \
            --cov-report=term-missing \
            --cov-report=xml:coverage.xml \
            --cov-report=html:htmlcov \
            --cov-fail-under=90 \
            --junit-xml=reports/pytest.xml \
            --durations=10

      - name: "📊 Upload Coverage to Codecov"
        uses: codecov/codecov-action@v4
        if: matrix.os == 'ubuntu-latest'
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: "📊 Upload Test Reports"
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-reports-${{ matrix.os }}-${{ matrix.python-version }}
          path: |
            reports/
            htmlcov/
            coverage.xml
          retention-days: 30

  # ===== PERFORMANCE TESTING =====
  performance:
    name: "⚡ Performance Tests"
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event.inputs.run_performance_tests == 'true' || github.ref == 'refs/heads/main'

    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@v4

      - name: "🐍 Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: "📦 Install Poetry"
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: "📦 Install Dependencies"
        run: poetry install --no-interaction --extras dev

      - name: "⚡ Run Performance Tests"
        run: |
          poetry run pytest tests/ \
            --benchmark-only \
            --benchmark-json=reports/benchmark.json \
            --benchmark-sort=mean

      - name: "📊 Upload Performance Reports"
        uses: actions/upload-artifact@v4
        with:
          name: performance-reports
          path: reports/benchmark.json
          retention-days: 30

  # ===== SECURITY SCAN =====
  security:
    name: "🔒 Security Scan"
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@v4

      - name: "🔍 Run Trivy Vulnerability Scanner"
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: "📊 Upload Trivy Results to GitHub Security"
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: "🔍 Run Semgrep Security Scan"
        uses: semgrep/semgrep-action@v1
        with:
          config: auto
          generateSarif: "1"

  # ===== DOCUMENTATION =====
  docs:
    name: "📚 Documentation"
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@v4

      - name: "🐍 Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: "📦 Install Poetry"
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: "📦 Install Dependencies"
        run: poetry install --no-interaction --extras dev

      - name: "📚 Build Documentation"
        run: |
          if [ -f mkdocs.yml ]; then
            poetry run mkdocs build --strict
          else
            echo "No mkdocs.yml found, skipping documentation build"
          fi

      - name: "📊 Upload Documentation"
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: documentation
          path: site/
          retention-days: 30

  # ===== BUILD & PACKAGE =====
  build:
    name: "📦 Build Package"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [quality-gate, test]

    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@v4

      - name: "🐍 Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: "📦 Install Poetry"
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: "📦 Install Dependencies"
        run: poetry install --no-interaction

      - name: "🔨 Build Package"
        run: poetry build

      - name: "📊 Upload Build Artifacts"
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 30

  # ===== RELEASE AUTOMATION =====
  release:
    name: "🚀 Release"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [quality-gate, test, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: "🐍 Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: "📦 Install Poetry"
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: "📦 Install Dependencies"
        run: poetry install --no-interaction --extras dev

      - name: "🏷️ Semantic Release"
        uses: python-semantic-release/python-semantic-release@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          root_options: "-vv"

  # ===== DEPLOYMENT =====
  deploy:
    name: "🚀 Deploy to ${{ github.event.inputs.deploy_environment || 'staging' }}"
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [release]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment: ${{ github.event.inputs.deploy_environment || 'staging' }}

    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@v4

      - name: "📥 Download Build Artifacts"
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: "🚀 Deploy to PyPI"
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          pip install poetry
          poetry publish --no-interaction

      - name: "📊 Create Deployment Summary"
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ github.event.inputs.deploy_environment || 'staging' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: $(poetry version -s)" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ Success" >> $GITHUB_STEP_SUMMARY

  # ===== NOTIFICATION =====
  notify:
    name: "📢 Notify"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [quality-gate, test, build]
    if: always()

    steps:
      - name: "📊 Create Status Summary"
        run: |
          echo "## 🚀 FLEXT CI/CD Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Quality Gate**: ${{ needs.quality-gate.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tests**: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build**: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
