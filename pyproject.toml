[build-system]
requires = ["poetry-core>=1.9.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "gruponos-meltano-native"
version = "0.7.0"
description = "Grupo Nos Meltano Native - Enterprise ETL Pipeline for Grupo Nos"
readme = "README.md"
authors = ["FLEXT Team <team@flext.sh>"]
maintainers = ["FLEXT Team <team@flext.sh>"]
license = "MIT"
homepage = "https://github.com/flext-sh/flext"
repository = "https://github.com/flext-sh/flext"
documentation = "https://github.com/flext-sh/flext/blob/main/README.md"
keywords = ["gruponos", "meltano", "native", "etl", "pipeline", "enterprise"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Database",
    "Topic :: System :: Archiving",
    "Framework :: AsyncIO",
    "Typing :: Typed",
]
packages = [
    { include = "gruponos_meltano_native", from = "src" },
    { include = "oracle", from = "src" },
    { include = "monitoring", from = "src" },
    { include = "config", from = "src" },
]

[tool.poetry.dependencies]
python = ">=3.13,<3.14"

# Meltano and Singer dependencies
meltano = ">=3.4.0"
singer-sdk = ">=0.39.0"
pydantic = ">=2.11.0"
pydantic-settings = ">=2.7.0"
structlog = ">=25.0.0"
click = ">=8.1.7"
python-dateutil = ">=2.9.0"
sqlalchemy = ">=2.0.0"
psycopg-binary = ">=3.2.0"
alembic = ">=1.13.0"
croniter = ">=2.0.0"
tenacity = ">=9.0.0"
orjson = ">=3.10.0"

# FLEXT Enterprise Libraries - Local workspace dependencies
flext-core = { path = "../flext-core", develop = true }
flext-db-oracle = { path = "../flext-db-oracle", develop = true }
flext-observability = { path = "../flext-observability", develop = true }

[tool.poetry.group.dev.dependencies]
# Development dependencies
pytest = ">=8.0.0"
pytest-asyncio = ">=0.23.0"
pytest-cov = ">=4.0.0"
pytest-mock = ">=3.12.0"
pytest-xdist = ">=3.6.0"
pytest-timeout = ">=2.3.1"
pytest-sugar = ">=1.0.0"
pytest-clarity = ">=1.0.1"
pytest-benchmark = ">=4.0.0"

# Code quality
ruff = ">=0.8.0"
mypy = ">=1.13.0"
pre-commit = ">=4.0.0"
bandit = ">=1.8.0"

# Documentation
mkdocs = ">=1.6.0"
mkdocs-material = ">=9.5.0"
mkdocs-mermaid2-plugin = ">=1.1.0"

[tool.poetry.scripts]
gruponos-meltano = "gruponos_meltano_native.cli:main"
meltano-native = "gruponos_meltano_native.meltano:main"

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=gruponos_meltano_native",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html:reports/coverage",
    "--cov-report=xml:reports/coverage.xml",
    "--cov-fail-under=90",
    "--maxfail=1",
    "--tb=short",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow tests",
    "smoke: Smoke tests",
    "e2e: End-to-end tests",
    "meltano: marks tests as Meltano tests",
    "etl: marks tests as ETL tests",
    "pipeline: marks tests as pipeline tests",
    "gruponos: marks tests as Grupo Nos specific tests",
    "requires_meltano: tests that need Meltano installed",
]
filterwarnings = ["error", "ignore::UserWarning", "ignore::DeprecationWarning"]
asyncio_mode = "auto"

# Ruff configuration - focused on src/ and tests/
[tool.ruff]
target-version = "py313"
line-length = 88
src = ["src", "tests"]

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "E501", # line too long (handled by formatter)
]

# Test-specific ignores
[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "S101",
    "D102",
    "N801",
    "N802",
    "N806",
    "PLR2004",
    "F401",
    "PLC0415",
    "G004",
    "T201",
]
"**/tests/*.py" = [
    "S101",
    "D102",
    "N801",
    "N802",
    "N806",
    "PLR2004",
    "F401",
    "PLC0415",
    "G004",
    "T201",
]
"test_*.py" = [
    "S101",
    "D102",
    "N801",
    "N802",
    "N806",
    "PLR2004",
    "F401",
    "PLC0415",
    "G004",
    "T201",
]
"**/test_*.py" = [
    "S101",
    "D102",
    "N801",
    "N802",
    "N806",
    "PLR2004",
    "F401",
    "PLC0415",
    "G004",
    "T201",
]


# Auto-generated files - exclude from ALL linting
"**/proto/*_pb2.py" = ["ALL"]
"**/proto/*_pb2_grpc.py" = ["ALL"]
"**/*_pb2.py" = ["ALL"]
"**/*_pb2_grpc.py" = ["ALL"]
"**/generated/**/*.py" = ["ALL"]
[tool.ruff.lint.isort]
known-first-party = ["gruponos_meltano_native"]
force-single-line = false
split-on-trailing-comma = true

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# MyPy configuration - focused on src/ and tests/
[tool.mypy]
python_version = "3.13"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Paths to check
files = ["src", "tests"]

# Import discovery
namespace_packages = true
explicit_package_bases = true

# Error output
show_error_codes = true
show_column_numbers = true
show_error_context = true
pretty = true

# Disable specific checks for tests
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

# External library stubs
[[tool.mypy.overrides]]
module = [
    "meltano.*",
    "singer_sdk.*",
    "pydantic.*",
    "structlog.*",
    "click.*",
    "sqlalchemy.*",
    "psycopg.*",
    "alembic.*",
    "croniter.*",
    "tenacity.*",
]
ignore_missing_imports = true

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true
omit = ["*/tests/*", "*/test_*", "*/__pycache__/*", "*/site-packages/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"
