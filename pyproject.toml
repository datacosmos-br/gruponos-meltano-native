[build-system]
requires = ["poetry-core>=1.9.0"]
build-backend = "poetry.core.masonry.api"

# ===== PEP 621 PROJECT METADATA (FLEXT STANDARD) =====
[project]
name = "gruponos-meltano-native"
version = "1.0.0"
description = "FLEXT Enterprise gruponos-meltano-native - Modern Python 3.13 Implementation"
authors = [{ name = "FLEXT Team", email = "team@flext.sh" }]
maintainers = [{ name = "FLEXT Team", email = "team@flext.sh" }]
license = { text = "MIT" }
readme = "README.md"
requires-python = ">=3.13,<3.14"
keywords = ["flext", "enterprise,python313,flext"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
    "Framework :: AsyncIO",
]

# Core runtime dependencies (minimal and modern)
dependencies = [
    # Core FLEXT dependencies (latest stable)
    "pydantic>=2.6.0,<2.10.0",
    "pydantic-settings>=2.5.0,<3.0.0",
    "click>=8.1.7,<9.0.0",
    "rich>=13.5.2,<14.0.0",
    "typer>=0.15.0,<1.0.0",
    "structlog>=24.0.0,<25.0.0",
    "httpx>=0.28.0,<1.0.0",
    "aiofiles>=24.1.0,<25.0.0",
    "python-dateutil>=2.9.0,<3.0.0",
    "python-dotenv>=1.0.0,<2.0.0",
    "typing-extensions>=4.12.0,<5.0.0",
    
    # Meltano and Singer SDK dependencies
    "meltano>=3.8.0,<4.0.0",
    "singer-sdk>=0.47.0,<1.0.0",
    "oracledb>=3.2.0,<4.0.0",
    "sqlalchemy>=2.0.35,<3.0.0",
    
    # Additional dependencies for data processing
    "requests>=2.32.0,<3.0.0",
    "urllib3>=1.26.0,<2.0.0",  # Compatible version for singer-sdk
]

[project.optional-dependencies]
# Development dependencies (bleeding-edge when possible)
dev = [
    # === TESTING FRAMEWORK (MODERN & COMPREHENSIVE) ===
    "pytest>=8.4.0",
    "pytest-cov>=6.2.0",
    "pytest-asyncio>=0.26.0",
    "pytest-mock>=3.14.0",
    "pytest-timeout>=2.4.0",
    "pytest-xdist>=3.7.0",
    "pytest-benchmark>=5.1.0",
    "pytest-sugar>=1.0.0",
    "pytest-clarity>=1.0.1",
    "pytest-randomly>=3.15.0",
    "pytest-deadfixtures>=2.2.1",
    "pytest-env>=1.1.5",
    "pytest-factoryboy>=2.8.0",
    "pytest-freezegun>=0.4.2",
    "pytest-httpx>=0.34.0",
    "pytest-lazy-fixtures>=1.1.1",
    "hypothesis>=6.125.0",
    "hypothesis-jsonschema>=0.23.1",
    "mutmut>=2.5.1",
    "faker>=33.1.0",
    "factory-boy>=3.3.1",
    "mimesis>=18.0.0",
    "responses>=0.25.3",
    "freezegun>=1.5.1",
    "time-machine>=2.16.0",
    "testfixtures>=8.3.0",
    "pytest-datadir>=1.5.0",
    "pytest-regressions>=2.5.0",

    # === CODE QUALITY (BLEEDING-EDGE) ===
    "ruff>=0.8.6",
    "mypy>=1.13.0",
    "black>=24.10.0",
    "isort>=5.13.2",
    "pylint>=3.3.0",
    "pycodestyle>=2.12.0",
    "mccabe>=0.7.0",
    "flake8>=7.1.0",
    "flake8-bugbear>=24.10.31",
    "flake8-comprehensions>=3.15.0",
    "flake8-simplify>=0.21.0",
    "pydocstyle>=6.3.0",
    "vulture>=2.13.0",
    "codespell>=2.3.0",
    "pyupgrade>=3.19.0",
    "autoflake>=2.3.1",

    # === SECURITY & SAFETY ===
    "bandit[toml]>=1.8.0",
    # "safety>=3.2.10",  # Disabled due to dependency conflicts
    # "pip-audit>=2.7.3",  # Disabled due to dependency conflicts
    # "semgrep>=1.100.0",  # Disabled due to dependency conflicts

    # === DEVELOPMENT TOOLS ===
    "pre-commit>=4.0.1",
    "commitizen>=4.1.1",
    "ipython>=8.37.0",
    "ipdb>=0.13.13",

    # === TYPE STUBS (LATEST) ===
    "types-requests>=2.32.0",
    "types-setuptools>=75.8.0",
    "types-python-dateutil>=2.9.0",
    "types-toml>=0.10.8",

    # === DOCUMENTATION ===
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.6.15",
    "mkdocstrings[python]>=0.29.0",
    "mkdocs-autorefs>=1.2.0",
    "mkdocs-git-revision-date-plugin>=0.3.2",

    # === BUILD & RELEASE ===
    "build>=1.2.2",
    "twine>=6.1.0",
    "tox>=4.25.0",
    "nox>=2024.1.0",
]

# Git dependencies (bleeding-edge - uncomment as needed)
dev-git = [
    # "ruff @ git+https://github.com/astral-sh/ruff.git",
    # "mypy @ git+https://github.com/python/mypy.git",
    # "black @ git+https://github.com/psf/black.git",
    # "pytest @ git+https://github.com/pytest-dev/pytest.git",
    # "pydantic @ git+https://github.com/pydantic/pydantic.git",
]

[project.scripts]
gruponos_meltano_native = "gruponos_meltano_native.cli:main"

[project.urls]
Homepage = "https://github.com/flext-sh/gruponos-meltano-native"
Repository = "https://github.com/flext-sh/gruponos-meltano-native"
Documentation = "https://docs.flext.sh/gruponos-meltano-native"
"Bug Tracker" = "https://github.com/flext-sh/gruponos-meltano-native/issues"
Changelog = "https://github.com/flext-sh/gruponos-meltano-native/blob/main/CHANGELOG.md"
"Source Code" = "https://github.com/flext-sh/gruponos-meltano-native"

# ===== POETRY CONFIGURATION =====
[tool.poetry]
packages = [{ include = "gruponos_meltano_native", from = "src" }]

# ===== RUFF CONFIGURATION (MAXIMUM STRICTNESS & PEP COMPLIANCE) =====
[tool.ruff]
line-length = 88
target-version = "py313"
fix = true
show-fixes = true
output-format = "github"
respect-gitignore = true
src = ["src"]

[tool.ruff.lint]
# Enable ALL rules for maximum quality (FLEXT Standard)
select = ["ALL"]
preview = true

# ONLY ignore absolute conflicts and formatter issues
ignore = [
    # ===== FORMATTER CONFLICTS (MANDATORY TO IGNORE) =====
    "COM812",  # trailing-comma-missing (handled by formatter)
    "ISC001",  # implicit-str-concat (conflicts with formatter)
    "D203",    # one-blank-line-before-class (conflicts with D211)
    "D213",    # multi-line-docstring-summary-second-line (conflicts with D212)
    "I001",    # import-order (handled by isort)

    # ===== REASONABLE FLEXIBILITY (FLEXT APPROVED) =====
    "TD003",   # Missing issue link on TODO
    "FIX002",  # Line contains TODO
    "ERA001",  # Commented out code (development)
    "PLR0912", # Too many branches (refactor gradually)
    "PLR0913", # Too many arguments (refactor gradually)
    "PLR0915", # Too many statements (refactor gradually)
    "PLR2004", # Magic value used in comparison (case by case)
    "C901",    # Too complex (refactor gradually)
    "BLE001",  # Do not catch blind exception (fix gradually)
    "TRY003",  # Avoid specifying long messages outside exception class
    "EM101",   # Exception must not use a string literal
    "EM102",   # Exception must not use an f-string literal
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "S101",    # Use of assert (pytest requirement)
    "S106",    # Possible hardcoded password (test fixtures)
    "PLR2004", # Magic values (test data)
    "ANN",     # Type annotations (optional in tests)
    "D",       # Docstrings (optional in tests)
    "ARG",     # Unused arguments (fixtures)
    "FBT",     # Boolean trap (test parameters)
    "SLF001",  # Private member access (testing)
    "DTZ001",  # Timezone aware datetime (test data)
    "PLC0415", # Import should be placed at top of module (test utilities)
    "CPY001",  # Copyright notice (not required in tests)
]
"scripts/*.py" = [
    "T201",    # Print statements (allowed in scripts)
    "S603",    # subprocess without shell=True (scripts)
    "S607",    # Starting a process with a partial path (scripts)
    "S404",    # subprocess module is possibly insecure (scripts)
    "ANN",     # Type annotations (optional in scripts)
    "D",       # Docstrings (optional in scripts)
    "EXE001",  # Shebang is present but file is not executable
    "CPY001",  # Copyright notice (not required in scripts)
    "DOC201",  # Return documentation (optional in scripts)
    "PLR0914", # Too many local variables (scripts)
    "PLR0911", # Too many return statements (scripts)
    "G004",    # f-strings in logging (allowed in scripts)
    "PLR6301", # Method could be static (scripts)
    "ARG002",  # Unused arguments (scripts)
]
"src/**/*.py" = [
    "CPY001",  # Copyright notice (will be added gradually)
    "DOC201",  # Return documentation (will be added gradually)
    "DOC501",  # Exception documentation (will be added gradually)
    "PLR0911", # Too many return statements (refactor gradually)
    "PLR0914", # Too many local variables (refactor gradually)
    "PLR1702", # Too many nested blocks (refactor gradually)
    "PLR6301", # Method could be static (refactor gradually)
    "ANN401",  # Any type (needed for dynamic data)
    "ARG002",  # Unused arguments (interface requirements)
    "TRY301",  # Abstract raise (acceptable pattern)
    "FURB113", # Use extend instead of append (minor optimization)
    "PLC1901", # String comparison simplification (readability)
    "S603",    # subprocess call (needed for integration)
    "S404",    # subprocess module (needed for integration)
]
"*/__init__.py" = [
    "F401",    # Module imported but unused (re-exports)
    "D104",    # Missing docstring in public package
    "CPY001",  # Copyright notice (not required in __init__)
]
"conftest.py" = [
    "D",       # Docstrings (pytest configuration)
    "CPY001",  # Copyright notice (not required in conftest)
]
"examples/*.py" = [
    "T201",    # Print statements (examples)
    "D",       # Docstrings (examples)
    "ERA001",  # Commented code (examples)
    "INP001",  # Implicit namespace package (examples)
    "CPY001",  # Copyright notice (not required in examples)
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "lf"
docstring-code-format = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.flake8-type-checking]
strict = true

[tool.ruff.lint.pylint]
max-args = 8
max-branches = 12
max-returns = 6
max-statements = 50

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

# ===== BLACK CONFIGURATION =====
[tool.black]
line-length = 88
target-version = ["py313"]
include = '\.pyi?$'
skip-string-normalization = false
skip-magic-trailing-comma = false

# ===== ISORT CONFIGURATION =====
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
split_on_trailing_comma = true
skip_gitignore = true
force_sort_within_sections = true
known_first_party = ["gruponos_meltano_native"]
known_local_folder = ["gruponos_meltano_native"]

# ===== MYPY CONFIGURATION (STRICT 100%) =====
[tool.mypy]
python_version = "3.13"
# Strict mode - ALL flags enabled
strict = true
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
extra_checks = true
check_untyped_defs = true
disallow_any_generics = true
disallow_any_unimported = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
implicit_reexport = false
no_implicit_optional = true
strict_optional = true
show_error_codes = true
show_column_numbers = true
show_error_context = true
pretty = true
explicit_package_bases = true
mypy_path = "src"
namespace_packages = true

# Exclude patterns
exclude = [
    "examples/.*",
    "scripts/.*",
    "build/.*",
    "dist/.*",
    ".venv/.*",
    "tests/.*",  # Tests have more relaxed type checking
]

# Module-specific overrides (minimal exceptions)
[[tool.mypy.overrides]]
module = ["tests.*"]
ignore_missing_imports = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false

# ===== PYTEST CONFIGURATION =====
[tool.pytest.ini_options]
minversion = "8.4"
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
testpaths = ["tests"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--maxfail=1",
    "--cov=src/gruponos_meltano_native",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-report=json:coverage.json",
    "--cov-fail-under=90",
    "--junit-xml=reports/pytest.xml",
    "--durations=10",
    "--tb=short",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow running tests",
    "network: Tests requiring network access",
    "docker: Tests requiring Docker",
    "auth: Tests requiring authentication",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# ===== COVERAGE CONFIGURATION =====
[tool.coverage.run]
source = ["src"]
branch = true
parallel = true
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
    "*/conftest.py",
    "*/examples/*",
    "*/scripts/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if TYPE_CHECKING:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "except ImportError:",
]

[tool.coverage.html]
directory = "htmlcov"
title = "gruponos-meltano-native Coverage Report"

[tool.coverage.xml]
output = "coverage.xml"

[tool.coverage.json]
output = "coverage.json"

# ===== PYLINT CONFIGURATION =====
[tool.pylint.main]
py-version = "3.13"
jobs = 0
fail-under = 10.0
persistent = true
suggestion-mode = true
extension-pkg-allow-list = ["pydantic"]

[tool.pylint.messages_control]
enable = ["all"]
disable = [
    "fixme",
    "too-few-public-methods",
    "too-many-instance-attributes",
    "too-many-arguments",
    "too-many-locals",
    "too-many-branches",
    "too-many-statements",
    "duplicate-code",
    "missing-module-docstring",
    "missing-class-docstring",
    "missing-function-docstring",
]

[tool.pylint.format]
max-line-length = 88

[tool.pylint.design]
max-args = 8
max-branches = 12
max-returns = 6
max-statements = 50

# ===== BANDIT CONFIGURATION =====
[tool.bandit]
targets = ["src"]
exclude_dirs = ["tests", "examples", "scripts"]
severity = "medium"
confidence = "medium"
format = "json"
output = "reports/bandit.json"

# ===== CODESPELL CONFIGURATION =====
[tool.codespell]
skip = "*.lock,*.json,*.min.js,*.min.css,htmlcov,dist,build,.git,.mypy_cache,.pytest_cache,.ruff_cache,.venv"
ignore-words-list = "atleast,datas,hass,fpr,ist,nd,te,ue,wan"

# ===== COMMITIZEN CONFIGURATION =====
[tool.commitizen]
name = "cz_conventional_commits"
version = "1.0.0"
tag_format = "v$version"
version_files = [
    "src/gruponos_meltano_native/__init__.py",
    "pyproject.toml:version",
]
style = [
    ["qmark", "fg:#ff9d00 bold"],
    ["question", "bold"],
    ["answer", "fg:#ff9d00 bold"],
    ["pointer", "fg:#ff9d00 bold"],
    ["highlighted", "fg:#ff9d00 bold"],
    ["selected", "fg:#cc5454"],
    ["separator", "fg:#cc5454"],
    ["instruction", ""],
    ["text", ""],
    ["disabled", "fg:#858585 italic"]
]
